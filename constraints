  
CREATE TABLE users (
	username VARCHAR(20) NOT NULL,
    age INT CHECK (age > 0)
);
 
CREATE TABLE palindromes (
  word VARCHAR(100) CHECK(REVERSE(word) = word)
)
**********************************************************************************************************************************************************************
                                                  CODE:CONSTRAINTS TO GIVE CORRECT ERROR MESSAGE
CREATE TABLE users2 (
    username VARCHAR(20) NOT NULL,
    age INT,
    CONSTRAINT age_not_negative CHECK (age >= 0) // IF VIOLATED IT PRINTS age_not_negative 
);
 
CREATE TABLE palindromes2 (
  word VARCHAR(100),
  CONSTRAINT word_is_palindrome CHECK(REVERSE(word) = word) // If violated it prints word_is_palindrome
);
*****************************************************************************************************************************************************
                                                          CODE:ALTER TABLE
 
ALTER TABLE companies
ADD COLUMN employee_count INT NOT NULL DEFAULT 1; //THE WORD COLUMN IS NOT MANDATORY 
*******************************************************************************************************************************************************
                                                           CODE:DROP COLUMN
ALTER TABLE companies DROP COLUMN phone;
*******************************************************************************************************************************************************
                                                          CODE:RENAME COLUMN OR TABLE NAME
ALTER TABLE companies
RENAME COLUMN name TO company_name;
***********************************************************************************************************************************************************
                                                           CODE:MODIFY
ALTER TABLE companies
MODIFY company_name VARCHAR(100) DEFAULT 'unknown';
**************************************************************************************************************************************************************
                                                           CODE:ONE TO MANY
CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(50)
);
 
CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
***************************************************************************************************************************************************************
                                                                 CODE:JOIN
-- Our first inner join!
SELECT * FROM customers
JOIN orders ON orders.customer_id = customers.id;
 
SELECT first_name, last_name, order_date, amount FROM customers
JOIN orders ON orders.customer_id = customers.id;
**********************************************************************************************************************************************************
                                                                CODE:LEFT TO JOIN ,IFNULL
SELECT 
    first_name, 
    last_name, 
    IFNULL(SUM(amount), 0) AS money_spent
FROM
    customers
        LEFT JOIN
    orders ON customers.id = orders.customer_id
GROUP BY first_name , last_name;
